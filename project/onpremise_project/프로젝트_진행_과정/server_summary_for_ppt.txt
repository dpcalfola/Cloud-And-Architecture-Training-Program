Server summary for ppt




SLA

Service Level Agreement

네트워크 장비가 제공하는 네트워크의 성능을 체크하고 모니터하는 기능
지연시간, 응답시간, 트래픽 등의 여러 정보를 지속적으로 측정하고 정의된 임계값을 초과했을때 경고나 이벤트 발생 시킬 수 있음


- 네트워크 연결 상태 감시
- 라우터에서 일정 간격마다 ping을 보내고 응답을 받는지 확인
- 응답의 성공 및 실패 여부가 카운트되며 이를 로그로 기록
- EEM 코드의 트리거로 활용함






EEM

Embedded Event Manager

실시간 이벤트에 대해 응답하는 명령어를 작성하여 조건에 따라 자동화된 작업을 수행하는 기능
트리거시 미리 정의된 액션 코드를 실행하며 이를 통해 다양한 동작을 수행

- SLA를 트리거로 장애 발생시 즉각적인 조치
- 특정 연결지점에서 장애가 발생시 대응 인터페이스를 shutdown 시켜 즉각적인 우회로 확보
- 빠른 원인 파악과 대응이 가능하도록 장애 관련 정보를 FTP 서버로 전송
- 백업 정보: 아래의 출력 결과를 리다이렉트하여 파일로 저장
    - show ip sla statistics <sla number>
    - show ip sla configuration <sla number>








IaC

Infrastructure as Code (코드형 인프라)
네트워크 인프라를 코드 베이스로 정의하고 구성

자동화: 간단한 명령어를 통해 짧은 시간 안에 인프라 구축 가능하며 제반 지식이 부족하더라도 운영 가능
확장성: 코드를 수정함으로써 필요에 따라 시스템의 확장과 축소를 쉽고 유연하게 처리
재현성: 코드를 통해 서버의 구성 정보 명시화, 인프라를 쉽게 복제하고 일관되게 재현 가능
버전 관리: 버전 관리 시스템을 통해 변경 사항을 추적하고 이력 관리

- Shell script를 이용하여 간단한 명령어로 10분여 시간만에 모든 서버를 구축 가능하도록 자동화
- configuration 파일을 분리함으로써 서버 서비스 구성 편집 및 관리 용이성 제고






docker

Container: 가상화 기술의 한 형태로 응용프로그램과 해당 의존성을 격리된 환경에서 실행하고 배포하는 경량화된 단위
Docker: 컨테이너 기반 가상화 기술을 제공하는 오픈소스 플랫폼

Host OS의 리소스를 논리적으로 공유하여 효율적인 자원 배분
빠른 배포, 일관적인 환경 구축 가능
각 컨테이너는 독립적이고 격리된 환경으로 동작

- 모든 컨테이너는 배포가능한 코드 형태로 제공되며 향후 필요에 따라 스케일 아웃이나 오케스트레이션이 가능하도록 확장성을 확보
- Dockerfile 을 이용한 컨테이너 이미지 생성으로 서비스 구성 편집 및 관리 용이성 제고
- 각 서버 서비스마다 독립적인 컨테이너로 동작하므로 호스트 하드웨어의 안정성 확보 및 서비스간 충돌 최소화
- 컨테이너간 개별 볼륨 사용으로 장애 발생시 데이터 손실 위험 없이 손쉽게 재구축 가능







docker-compose

Docker 기반 응용 프로그램의 다중 컨테이너 구성을 정의하고 실행하기 위한 도구

yaml 형식을 사용하여 서비스를 정의하고 설정
다중 컨테이너를 쉽게 생성 삭제 관리
여러 컨테이너간의 의존성을 쉽게 관리

- 3-tier로 구성되는 Web service 3개의 컨테이너를 동시에 생성 및 관리
- 컨테이너간 의존성 및 안정성 확보









FTP

File Transfer Protocol

파일을 전송하는 표준 네트워크 전송 프로토콜

- FTP 서버를 구축하고 데이터를 파일 형태로 전송 및 백업
- SLA-EEM 과 연동하여 장애 발생시 관련 정보를 즉각적으로 FTP 서버에 백업

- FTP 서버 접속시 서비스 안정성을 위해 외부로 드러나는 root path “/” 모든 권한을 제거
- remote path 인 “/backup-data” 디렉터리 소유권은 mzc-ftp 설정.
- FTP 서버로 전송되는 파일은 “/backup-data” 디렉터리에 저장됨
- (컨테이너 내부의 절대경로: /home/mzc-ftp/ftp/backup-data)







DHCP

Dynamic Host Configuration Protocol
네트워크 기기가 네트워크 구성요소를 자동으로 획득하는데 사용되는 프로토콜

ip address를 동적으로 할당하거나 회수
ip 주소 외에도 서브넷 마스크, 게이트웨이, DNS 서버 등의 네트워크 구성 요소도 함께 할당
중앙집중형 관리
서로 다른 네트워크나 서브넷따라 각각 다른 설정값(ex 할당될 ip 주소의 범위) 적용 가능

- Vlan 기준으로 분리된 각 영역으로 접속하는 End device에 네트워크 구성정보 자동 할당








3-tier Web Service (1) - 개요

웹 서비스를 3가지 논리적인 계층으로 구분하여 설계하는 아키텍처 패턴

Presentation tier
    - Web server 가 담당
    - 사용자의 요청을 직접 받고 응답해주는 영역이며 나머지 두 개층이 노출되지 않도록 보호 (proxy 서버 역할)
    - 정적 파일을 제공하며 동적 파일이 필요할 경우 Application Layer 로 요청을 전달하고 응답을 받아 사용자에게 전달
Application tier
    - Web application 이 담당
    - 비지니스 로직을 처리
    - Presentation tier 와 Data tier 사이에서 통신을 주고 받으며 동적인 웹 페이지를 생성
Data tier
    Database 가 담당
    데이터를 저장하고 관리하는 영역



모듈화, 유연성
    - 각 계층을 분리하여 개발하므로 유지보수가 용이
    - 한 계층을 변경해도 다른 계층에 영향을 미치지 않음
확장성
    - 계층별로 구분된 서버를 필요에 따라 각각 추가할 수 있음(스케일 인/아웃)
보안성
    - 외부로 노출되는 영역은 Presentation Layer 뿐이므로 보안성이 높음




3-tier Web Service (2) - 구성

Presentation tier
    Nginx (Web-server)
Application tier
    Django (Web Application)
Data tier
    PostgreSQL (Database)

< 이미지 첨부 >