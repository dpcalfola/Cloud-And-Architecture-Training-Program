===============================================================================
Document Information

    주제: HTTP/HTTPS

    작성자: 이은상
    문서 version: 0.1



    작성일: 2023.06.11
    최종 수정일: 2023.06.11

    수정 이력:
        2023.06.11 - 초안 작성


===============================================================================

*** Memo ***

    * 문서는 PPT 문서 초안이라고 염두하고 작성했습니다.
        (키워드 반복이 많은 이유)


    * 프로토콜 특성상 주로 웹개발 관점으로 서술되었습니다.

        클라이언트 -> 송신자 / 서버 -> 수신자 (request, response 상황)
        로 대체하면 네트워크 인프라 관점으로 해석이 가능하나
        이는 언급만 하고 용어는 그대로 가져가는 방향으로 생각하고 있습니다.




===============================================================================






< HTTP/HTTPS 기본 개념 >

1. http 와 https 의 개요

    1.1
        HTTP (Hypertext Transfer Protocol)
            - http 는 기본적으로 평문 텍스트로 통신
            - 데이터의 암호화나 보안 기능을 제공하지 않음
            - 도청되거나 변조될 수 있는 보안적 취약점 존재

    1.2
        HTTPS (HyperText Transfer Protocol Secure)
            - http 의 보안 버전 (작동 방식은 동일)
                - 데이터를 암호화하여 안전하게 전송
            - 암호화 프로토콜
                - SSL(Secure Sockets Layer) 또는
                - TLS(Transport Layer Security)
            - 암호화 대상
                - 데이터
                - 서버의 신원 인증



    1.3 주요 차이점
        보안:
            - (h)평문 텍스트로 전송
            - (s)데이터를 암호화 하여 전송


        암호화 관련:
            - 대칭키 vs 비대칭키 이론


        암호화 프토토콜
            - SSL(Secure Sockets Layer)
            - TLS(Transport Layer Security)


        암호화 알고리즘 (SHA-256, RSA, AES)
            - 암호화 알고리즘과 암호화 프로토콜은 다른 개념


        인증서 사용 유무
            - 인증서를 사용하여 서버의 신원을 확인
            - 인증서는 신뢰할 수 있는 기관(Certificate Authority)에 의해 발급
            - 클라이언트는 이를 통해 서버가 신뢰할 수 있는지 확인
            - 인증서가 없을 경우 Https 통신이 불가능하며 브라우저에서 경고창이 뜸


        검색엔진 최적화
            - SEO(Search Engine Optimization) 개념
            - 많은 웹사이트들이 검색엔진에서 상위에 노출시키기 위해 노력함
            - http 서버보다 https 서버가 검색 순위에서 더 높은 가중치를 받음




2. 보안 측면에서의 http 와 https

    2.1
        http 의 보안 약점과 취약성
            평문 통신의 문제 (plain text)
                - 전송되는 데이터를 쉽게 해석
            데이터 무결성 문제점
                - http 무결성 확인 절차가 없음
                - https 는 무결성 보장을 위한 메커니즘이 존재
            신원 확인 부재
                - http 는 서버의 신원을 확인하지 않음
                - 따라서 중간자 공격자가 서버로 위장하여 클라이언트와 통신 위험성 존재


    2.2
        https 보안문제 해결방식
            평문 통신 대신 암호화된 통신 방식 사용
                - 데이터가 탈취되었다 하더라도 암호화되어 있기 때문에 해석이 어렵다

            무결성 문제
                - 무결성(데이터가 중간에 변조되지 않았다는 의미)
                - 무결성을 보장하는 메커니즘이 존재
                    - 암호화
                    - 디지털 서명
                    - 인증서 검증
                    - 해시 함수 사용

            신원 확인
                - 인증서를 사용하여 서버의 신원을 확인
                - Certificate Authority 가 서버에게 인증서를 발급하여 신원을 보장해 줌
                - 인증서가 없을 경우 Https 통신이 불가능하며 브라우저에서 경고창
                - (경고를 무시하고 진행할 수도 있음)





3. https 의 장점, 단점

    3.1
        장점
            - 데이터의 기밀성
            - 데이터의 무결성
            - 서버의 신원 보증
            - 브라우저 호환성과 신뢰성
            - 브라우저의 추가 보안 기능을 활용 가능
            - 브라우저에서 웹 사이트의 보안 상태를 확인하고 경고 메시지를 표시
                - 사용자를 악성 웹 사이트로부터 보호하는 효과
            - 금융 업무와 같은 보안이 중요한 상태에서 웹 브라우저가 자물쇠 아이콘 표시
                - * (이 부분 관련 작동 방식 검색 미흡 상태)

            - 검색 엔진 최적화(SEO, Search Engine Optimization)
                - https 가 검색 순위에서 더 높은 가중치를 받음
                - 검색 엔진 최적화를 위한 방법 중 하나
                - https 를 사용하지 않으면 검색 순위에서 뒤로 밀릴 수 있음


    3.2
        단점
            - 암호화/복호화 과정에서 추가적인 리소스 소모
            - 속도가 상대적으로 느려짐
            - 추가비용
                - 인증서 발급/갱신 비용
                - 개발 비용












< 심화 1. 인증서와 암호화 통신 >

1. 인증서에 포함되어 있는 정보
    - 서버 정보
    - 서버의 공개 키
    - 암호화 알고리즘 정보
    - 인증서 발급자 정보
    - 인증서의 유효 기간



2. 암호화 개념

    2.1
        암호화 기초 개념
            - 해시함수와 해시값
            - 암호화에서 키의 역할 예시: 소수의 곱셈

            - 메시지 인증 코드(Message Authentication Code, MAC)
                - 메시지 인증 코드를 통해 메시지의 무결성을 확인할 수 있음
                - (* 자세한 내용 포함 여부 미정)
                - 이 과정에서 비밀키(대칭키 혹은 비대칭키)


        대표적인 암호화 알고리즘
            - SHA-256
            - RSA
            - AES


        대칭키와 비대칭키의 차이점
            - 대칭키(Symmetric Key Encryption)
                - 암호화와 복호화에 같은 키를 사용
                - 키 노출 시 모든 암호화 내용이 노출됨
            - 비대칭키(Asymmetric Key Encryption)
                - 공개키와 비공캐키를 이용한 암호화와 복호화


        (중간점검) "Key" 용어 정리 (상/하위 개념 명확히)
                - 키 ?
                    - 비밀키(Secret Key)
                        - 대칭 암호 방식 (대칭키)
                        - 비대칭 암호 방식 (비대칭키)
                            - 공개키(Public Key)
                            - 비공개키 == 비밀키(Private Key)
                                - 개인키(Private Key): 비공개키 유사개념, 소유자 관점에서의 비공개키를
                                의미



        비대칭키 방식의 암호화
            - 공개키: 누구나 볼 수 있음
            - 비공개키: 키의 소유자만 가지고 있음 (절대 노출되면 안 됨))

            - 공개키와 비공개키의 사용
                - 공개키로 암호화된 데이터는 비공개키로만 복호화 가능
                - 비공개키로 암호화된 데이터는 공개키로만 복호화 가능




3. 공개키 인프라 (PKI, Public Key Infrastructure) 개념
    디지털 서명
        - 송신자는 개인키를 사용하여 문서에 서명 생성
        - 수신자는 해당 서명을 송신자의 공개키 를 사용하여 검증
    인증 기관의 역할
        - 인증기관: CA(Certificate Authority)
        - 공개키를 검증하고 해당 공개키에 대한 인증서를 발급
        - 공개키의 신뢰성 확보
    결론
        - https 프로토콜은 공개키 인프라를 기반으로 안전한 통신을 구현



















< 심화 2. https 구현 >


1. SSL/TLS 프로토콜의 세부적인 내용

    SSL/TLS 프로토콜의 개요
        - SSL/TLS 프로토콜: 웹 서버와 웹 브라우저 사이의 통신을 암호화하는 프로토콜
        - SSL (Secure Sockets Layer)
        - TLS (Transport Layer Security)
            - TLS 는 SSL 의 후속 버전, 현재는 주로 TLS 프로토콜 사용

    SSL/TLS 프로토콜의 작동방식
        - 핸드셰이크
        - 인증 및 키 교환
        - 대칭키 암호화
        - 데이터 전송
        - 무결성 검사
        - Perfect Forward Secrecy (PFS): PFS는 통신 세션마다 임시 키를 생성하여 보안을 강화하는 기법입니다. 이를 통해 한 세션의 키가 유출되더라도 이전과 이후의 세션에 대한 보안이 유지됩니다.

        -
            TLS(Transport Layer Security) 프로토콜은 클라이언트와 서버 간의 안전한 통신을 제공하기 위해 다음과 같은 순서로 작동합니다:

            핸드셰이크(Handshake):

            클라이언트는 서버에 접속하고, TLS 연결을 설정하기 위해 ClientHello 메시지를 보냅니다. 이 메시지에는 클라이언트가 지원하는 암호화 알고리즘 목록과 랜덤 데이터가 포함됩니다.
            서버는 클라이언트의 요청에 대해 ServerHello 메시지로 응답합니다. 이 메시지에는 서버가 선택한 암호화 알고리즘, 인증서, 및 랜덤 데이터가 포함됩니다.
            서버는 클라이언트에게 공개키 인증서를 전송합니다. 클라이언트는 서버의 인증서의 유효성을 확인하고, 서버의 공개키를 얻습니다.
            클라이언트는 사전 마스터 비밀키(pre-master secret)를 생성하고, 서버의 공개키로 암호화하여 서버에게 전송합니다.
            키 교환(Key Exchange):

            서버는 클라이언트로부터 받은 사전 마스터 비밀키를 개인키로 복호화하여 마스터 비밀키(master secret)를 생성합니다. 클라이언트도 동일한 과정을 수행하여 마스터 비밀키를 얻습니다.
            클라이언트와 서버는 마스터 비밀키를 사용하여 세션 키(session key)를 생성합니다. 이 세션 키는 암호화 및 복호화에 사용됩니다.

            인증(Authentication):

            클라이언트와 서버는 서로에 대한 인증을 수행합니다. 서버는 인증서로부터 얻은 공개키로 클라이언트의 사전 마스터 비밀키를 확인하고, 클라이언트는 서버의 인증서의 유효성을 검증합니다.
            암호화 및 통신(Encryption and Communication):

            클라이언트와 서버는 상호 약속된 암호화 알고리즘과 세션 키를 사용하여 통신 데이터를 암호화합니다. 이 암호화된 데이터는 통신 중에 제3자로부터의 감청이나 변조를 방지합니다.
            TLS 핸드셰이크 후에는 클라이언트와 서버가 상호작용하면서 데이터를 주고받게 되며, 암호화와 인증이 지속적으로 유지됩니다. TLS는 위의 순서를 따라 작동하여 클라이언트와 서버 간에 안전한 통신



    SSL/TLS 프로토콜의 TCP/IP 계층 구분에 따른 위치
        - 응용 계층에서(5,6,7 계층) 전송 계층(4 계층)으로 데이터를 전달하기 전에 암호화하고
        - 전송 계층(4 계층)에서 응용 계층(5,6,7 계층)으로 데이터를 전달하기 전에 복호화




2. 핸드셰이크 (Handshake)?

    SSL/TLS 연결의 설정 및 인증을 담당

    과정:
        1) 클라이언트는 서버에 대한 연결 요청
        2) 서버는 인증서를 제공하여 신원을 확인
        3) 클라이언트와 서버는 서로의 암호화 및 해독 알고리즘, 인증서, 세션 키 등에 대한 정보를 교환
            - 대칭키 교환에 사용하는 공개키 암호화 통신 과정 (후술)
        4) 암호화된 통신을 위한 위한 공통 설정을 수립



    대칭키 교환에 사용하는 공개키 암호화 통신 과정
        - 통신 목적: 공개키 암호화 통신을 이용하여 서버와 클라이언트가 사용할 대칭키를 생성 공유하는 과정
            -> 대칭키 사용 암호화가 쉽고 빠르기 때문.

        - 과정
            - RSA 공개키 생성:
                - 서버가 RSA 공개 키와 개인 키를 생성
                    - 공개키는 모두에게 공개되며, 개인키는 서버만 알아야 함

            - 대칭키 생성 및 암호화
                - 클라이언트가 대칭 키를 생성
                - 클라이언트는 서버의 공개 키를 사용하여 대칭키를 암호화
                - 암호화된 대칭키를 서버에게 전달

            - 대칭키 복호화:
                - 서버는 서버 개인키를 사용하여 암호화된 대칭 키를 복호화
                - 서버와 클라이언트는 동일한 대칭 키를 공유하게 됨

            -> 대칭키 공유 이후로는 대칭키를 사용하여 암호화 통신을 진행
                - 공개키 암호화 통신 과정이 더 복잡하고 느림




3. 인증서 발급과 관리 내용
    (인증서 내용은 ssh 프로토콜과 관련있음)

    인증서 발급
        - SSL/TLS 인증서는 CA에 의해 구매 혹은 발급
        - 대표적인 CA 기관 목록 (안중요):
            - Symantec
            - Comodo
            - GoDaddy
            - GlobalSign
            - Let's Encrypt (무료, 접근성 좋음)

        - 참고
            - 현재는 무료 인증서 발급이 쉽고 간단해졌기 때문에
                (Let's Encrypt 에서 누구나 무료로 발급 가능)
                인증서 보유 여부가 안전한 웹사이트라는 것을 보장하지 않음

    발급 과정:
        개인키 생성: 인증서 발급을 위해 개인키를 생성
        인증서 요청: CA에게 인증서를 요청하면, 개인키와 함께 인증서 파일이 발급
        인증서 갱신: 인증서는 만료기간이 있으며 따라서, 주기적인 갱신이 필요함









< 심화 3. https 설정과 동작 >


1. https 설정
    - 서버에 인증서 파일과 개인 키 저장
    - https 포트 설정: 기본값 443 포트, 서버의 설정에서 해당 포트를 https 로 설정하고 개방
    - 가상 호스팅 설정: https 통신을 위한 가상 호스팅 설정을 추가 (*세부 내용 조사 미흡한 상태)
    - https 리디렉션: 모든 http 요청을 https 리디렉션 하도록 설정
        ->리디렉션: http 방식으로 요청이 들어와도 https 통신 경로로 넘겨버림
    - 암호화 프로토콜(SSL 또는 TLS) 및 암호화 알고리즘 선택
        - (암호화 프로토콜과 암호화 알고리즘의 개념적 차이 한번 더 언급)





2.HTTPS 동작 과정 (총정리)

    클라이언트와 서버의 핸드셰이크:
        - 클라이언트(일반적으로 웹 브라우저)가 https 사용하여 웹 사이트에 연결하려고 시도(request)
        - 서버는 클라이언트의 연결 요청을 받고, SSL/TLS 핸드셰이크 프로토콜을 사용하여 암호화 통신을 설정

    서버의 인증서 제공:
        - 서버가 클라이언트에게 서버의 인증서를 제공
        - 이 인증서는 클라이언트가 서버의 신원을 확인하는 데 사용
        - 인증서에는 서버의 정보, 공개 키, 서명 기관의 정보 등이 포함

    클라이언트의 인증서 검증:
        - 클라이언트는 인증서의 유효성, 서명 기관의 신뢰도, 인증서의 도메인 일치 등을 확인
        - 클라이언트(웹브라우저)는 신뢰할 수 있는 인증 기관의 인증서 목록을 가지고 있고 이를 통해 검증을 수행

    대칭 키 교환:
        - 공개키 암호화 통신을 사용하여 안전하게 대칭키를 교환하고 공유함
        - 대칭키는 데이터를 암호화 및 복호화하기 위해 사용

    데이터의 암호화 및 전송:
        - 클라이언트와 서버는 이제 대칭 키를 사용하여 데이터를 암호화하고, 상호 간에 암호화된 데이터 송수신
        - 클라이언트와 서버는 SSL/TLS 프로토콜을 통해 데이터의 안전한 전송을 보장

    세션 유지:
        - 클라이언트와 서버는 연결을 유지하며, 여러 요청과 응답을 주고받을 수 있습니다
        - 이후 클라이언트와 서버 간의 통신은 계속해서 암호화된 상태로 유지됩니다.












< 마무리 - 그래서 http / https 어느 것을 선택할 것인가? >

1. 두괄식 결론:
    보안성, 성능, 비용 사이의 트레이드오프


2. 두 프로토콜의 속도 차이
    - 일반적으로 https 가 http 보다 속도가 느림
    - 기술(특히 하드웨어) 발전으로 속도에서의 차이점은 미미한 수준
    - 그럼에도 불구하고....



3. https 성능 개선 관련 내용
    단순무식: 하드웨어 업그레이드

    네트워크 인프라 관점에서의 성능 개선
        - 캐시 서버
        - 로드 밸런싱
        - CDN (Content Delivery Network)
        - HTTP/2, HTTP/3

    암호화 복호화 과정에서 발생하는 오버헤드 최적화 *(포함 여부 고민)

    SSL / TSL 세션 재사용 *(포함 여부 고민)
        - Session ID
        - Session Ticket
        - False Start
        - TLS False Start
        - TLS 1.3


4. 수미상관 결론:
    - 보안성, 성능, 비용 사이의 트레이드오프이나
    - 성능면에서 큰 영향이 없기 때문에 대부분 https 를 사용








