$ aws ec2 create-vpc \
--cidr-block 192.168.0.0/16 \
--tag-specification 'ResourceType=vpc,Tags=[{Key=Name,Value=Cli-VPC}]'

$ aws ec2 describe-vpcs 
$ aws ec2 describe-vpcs --query 'Vpcs[].[CidrBlock, VpcId]'
$ aws ec2 describe-vpcs --query 'Vpcs[].{VPC: VpcId, CIDR: CidrBlock}'
$ aws ec2 describe-vpcs --query 'Vpcs[].{VPC: VpcId, CIDR: CidrBlock}' \
  --filter 'Name=tag:Name,Values=Cli-VPC'

$ aws ec2 describe-vpcs --filters Name=tag:Name,Values=Cli-VPC --query Vpcs[].VpcId --output text
$ VPCID=$(aws ec2 describe-vpcs --filters Name=tag:Name,Values=Cli-VPC --query Vpcs[].VpcId --output text)
$ echo $VPCID


####? dns-hostnames, dns-resolutions

$ aws ec2 modify-vpc-attribute \
 --enable-dns-hostnames \
 --vpc-id $VPCID

$ aws ec2 describe-vpc-attribute \
--attribute enableDnsHostnames \
--vpc-id $VPCID

-------------------------------------------------------------------------------------------------------------
$ aws ec2 create-subnet \
--vpc-id $VPCID \
--availability-zone ap-northeast-2a \
--cidr-block 192.168.0.0/24 \
--tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=cli-public}]' 

$ aws ec2 create-subnet \
--vpc-id $VPCID \
--availability-zone ap-northeast-2a \
--cidr-block 192.168.1.0/24 \
--tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=cli-private}]'

$ aws ec2 describe-subnets

$ aws ec2 describe-subnets \
--filter "Name=vpc-id,Values=$VPCID" \
--query  Subnets[].[SubnetId,CidrBlock,Tags]

$ Public=$(aws ec2 describe-subnets --filters Name=tag:Name,Values=cli-public --query Subnets[].SubnetId --output text)

$ echo $Public

-------------------------------------------------------------------------------------------------------------
$ aws ec2 create-internet-gateway \
--tag-specifications 'ResourceType=internet-gateway,Tags=[{Key=Name,Value=cli-igw}]'

$ aws ec2 describe-internet-gateways

aws ec2 describe-internet-gateways --filter Name=tag:Name,Values=cli-igw

$ IGW=$(aws ec2 describe-internet-gateways --filter Name=tag:Name,Values=cli-igw --query InternetGateways[].InternetGatewayId --output text)

$ echo $IGW

$ aws ec2 attach-internet-gateway --vpc-id $VPCID \
--internet-gateway-id $IGW

$ aws ec2 describe-internet-gateways \
--filter Name=internet-gateway-id,Values=$IGW

-------------------------------------------------------------------------------------------------------------
$ aws ec2 create-route-table --vpc-id $VPCID \
--tag-specifications 'ResourceType=route-table,Tags=[{Key=Name,Value=Public-RT}]'

$ PublicRT=$(aws ec2 describe-route-tables --filter Name=tag:Name,Values=Public-RT --query RouteTables[].RouteTableId --output text)

$ echo $PublicRT

$ aws ec2 create-route \
--route-table-id $PublicRT \
--destination-cidr-block 0.0.0.0/0 \
--gateway-id $IGW

$ aws ec2 describe-route-tables --route-table-ids $PublicRT

$ aws ec2 associate-route-table --subnet-id $Public --route-table-id $PublicRT

$ aws ec2 describe-route-tables --route-table-ids $PublicRT --query RouteTables[].Associations[].SubnetId

-------------------------------------------------------------------------------------------------------------
$ aws ec2 create-security-group \
--group-name Cli-Demo-SG \
--description "Security group for SSH and HTTP access" \
--vpc-id $VPCID

$ SG=$(aws ec2 describe-security-groups --query 'SecurityGroups[?GroupName==`Cli-Demo-SG`].GroupId' --output text)

$ echo $SG


$ aws ec2 authorize-security-group-ingress \
--group-id $SG \
--protocol tcp --port 22 --cidr 0.0.0.0/0

$ aws ec2 authorize-security-group-ingress \
--group-id $SG \
--protocol tcp --port 80 --cidr 0.0.0.0/0

----------------------------------------------------------------------------------------------------------------
$ aws ec2 create-key-pair --key-name MyKeyPair --query 'KeyMaterial' --output text > MyKeyPair.pem
$ chmod 400 MyKeyPair.pem
$ vi userdata.txt

#!/bin/bash
yum install -y httpd
systemctl start httpd
systemctl enable httpd
echo "<h1>Test Web Page</h1>" > /var/www/html/index.html

$ aws ec2 run-instances \
--image-id ami-084e92d3e117f7692 \
--count 1 \
--instance-type t2.micro \
--key-name MyKeyPair \
--security-group-ids $SG \
--subnet-id $Public \
--user-data file://userdata.txt \
--associate-public-ip-address \
--tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Test-Server}]'

$ aws ec2 describe-instances --filters Name=tag:Name,Values=Test-Server

$ aws ec2 describe-instances --filters Name=tag:Name,Values=Test-Server \
--query Reservations[].Instances[].PublicIpAddress


$ testServerIP=$(aws ec2 describe-instances \
--filters Name=tag:Name,Values=Test-Server \
--query Reservations[].Instances[].PublicIpAddress --output text)

$ echo $testServerIP


$ ssh -i "MyKeyPair.pem" ec2-user@<Public IP 주소>
$ ssh -i "MyKeyPair.pem" ec2-user@$testServerIP
